.TH "md__r_e_a_d_m_e" 3 "Thu May 10 2018" "Version 0.3.2-0" "libcmdparse" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__r_e_a_d_m_e \- README 
libcmdparse version 0\&.3\&.2-0
.PP
.SH "What is libcmdparse?"
.PP
.PP
libcmdparse is a simple library for command line argument parsing\&. options may be declared in a domain specific language resembling regular expressions\&.
.PP
.SH "Why does libcmdparse exist?"
.PP
.PP
this project may seem to imitate existing tools\&. that impression would be correct\&. the purpose of libcmdparse is to experiment with C++ while doing something which is (suprisingly) useful in that same language: command-line argument processing\&. this project is done solely for my educational benefit, as I am new to C++, so all constructive criticism is welcomed\&.
.PP
.SH "Details"
.PP
.PP
.SS "What is an option?"
.PP
options are represented by the option_t struct, which specifies the properties of the option as well as its uniquely identifying name\&. option_t objects are considered equal if they have equal names\&. options are identified in two key ways: through the name, which is used internally while defining options to maintain consistency, and externally by the user as the single access point to the results of parsing; and through the handles which appear in unparsed input, such as '--version' or '-V'\&. the user provides handles at the time options are defined; an option's name is either the second argument to option_parser's option member or is deduced from the list of handles\&. options have four properties: number, assignment, collection, and data type, which are used to express the full range of possible option implementations\&. a typical boolean option, for instance, might be implemented as 
.PP
.nf
1 {c++}
2   parser\&.option("--histexpand?")

.fi
.PP
 here the handle is '--histexpand', and the '?' following the name indicates that the option is allowed to appear zero or one time (i\&.e\&. it has number ZERO_ONE)\&. this number is the default setting, so the question mark could be left out without changing the meaning\&. since no name is provided to the option method, the name of this option is deduced to be simply 'histexpand'\&.
.PP
the following lists enumerate all of the values of the four properties, their meanings, and the syntax used to set them\&. the parse input is the first argument passed to option_parser's parse member, which has type char **\&. a handle list is the group of handles separated in the option spec by pipes (|)\&.
.PP
Num_Prop:
.IP "1." 4
ZERO_ONE | '?' at the end of the handle list (default) | option may occur zero or one time
.IP "2." 4
ZERO_MANY | '\\*' at the end of the handle list | option may occur any number of times
.PP
.PP
Assign_Prop:
.IP "1." 4
NO_ASSIGN | option does not take arguments (default) | no syntax needed
.IP "2." 4
EQ_REQUIRED | option takes argument, but must use an equal sign | '=' after handle list and number modifiers, if any
.IP "3." 4
EQ_MAYBE | option takes arguments, but may use an equals sign or grab the next value in the parse input | '=?'
.IP "4." 4
EQ_NEVER | option takes arguments, but may not use an equals sign | '=!'
.IP "5." 4
STUCK | option takes an argument that is appended to the handle | '=|' (not yet implemented)
.PP
.PP
Collect_Prop:
.IP "1." 4
SCALAR | argument treated as a single value for storage (default) | no syntax needed
.IP "2." 4
LIST | argument treated as comma-separated list, each element of which is stored separately | '[]' following assignment property, if any
.PP
.PP
Data_Type:
.IP "1." 4
STRING | argument is a string (default) | 's' after assignment property or in '[]'
.IP "2." 4
INTEGER | argument must contain only digits | 'i' \&.\&.\&.
.IP "3." 4
FLOAT | argument must contain only digits or a period surrounded by digits | 'f' \&.\&.\&.
.PP
.PP
.SS "API"
.PP
the library uses the util namespace\&. functionality is distributed in three classes: option_t, option_parser, option_info\&. in most cases, option_t need not be used directly\&. the other two classes are essential to the library and will be discussed here\&.
.PP
.SS "option_parser:"
.PP
option_parser is the class used to define all the possible options to your command line application and to initiate parsing\&. it privately uses a map to store pairs of 'handles' and option_t objects, and a set to store the names of option_t objects already registered in the handle map\&. this set allows the parser to ensure that no equal but incompatible options are registered\&. see above for clarification of this scenario\&.
.PP
\fCstd::shared_ptr<option_t> option(std::string spec, std::string name = '')\fP
.PP
declare an option
.PP
\fCoption_info parse(char** argv, int argc)\fP
.PP
parse all known options from argc words in argv
.PP
\fCvoid clear_options()\fP
.PP
free memory used to store options 
.SS "option_info:"
.PP
\fCbool has(std::string name)\fP
.PP
check whether an option was found
.PP
\fCint count(std::string name)\fP
.PP
check the number of occurrences of an option
.PP
\fCstd::string arg(std::string name, std::string default)\fP
.PP
return the first argument found under option name, or the default
.PP
\fCIterPair list(std::string name)\fP
.PP
return iterators denoting range of values stored under option name
.PP
\fCstd::vector<std::string> rest\fP
.PP
contains the non-option strings from the parsing source
.PP
.SS "Dependencies"
.PP
libcmdparse depends only on the standard library of C++11
.PP
building it requires CMake >= 3\&.0, Make, and a C++ compiler that supports C++11\&.
.PP
all tests depend on libtap++\&.
.PP
.SH "Installation"
.PP
.PP
.SS "Ubuntu/Debian"
.PP
Clone the project and \fCcd\fP to its directory\&. Run CMake on the current directory: 
.PP
.nf
1 cmake \&.

.fi
.PP
.PP
Then use make to build, test, and install: 
.PP
.nf
1 make
2 make test
3 sudo make install

.fi
.PP
.PP
make's \fCdebug\fP target can be used in place of \fCtest\fP\&. it runs uses a shell script as a substitute for CTest, the test driver included with CMake, because CTest does not play well with unit test libraries\&. invoke ctest manually if you cannot or don't wish to run the script\&. in that case, for better test output I recommend that you invoke ctest with the \fC--verbose\fP option\&.
.PP
.SS "Windows"
.PP
libcmdparse doesn't support Windows
.PP
.SH "License"
.PP
.PP
Copyright (C) 2018 Adam Marshall
.PP
Made available under the MIT license, which is distributed with the project itself 
